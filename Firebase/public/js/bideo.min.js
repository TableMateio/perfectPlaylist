/*!
 * Bideo.js - HTML5 background video player library
 * @version 1.0.0
 * @link https://github.com/rishabhp/bideo.js
 * @license MIT
 */
(function(global) {
  function Bideo() {
    this.opt = null;
    this.videoEl = null;
    this.approxLoadingRate = null;
    this._resize = null;
    this._progress = null;
    this.startTime = null;
    this.onLoadCalled = false;
    this.init = function(opt) {
      this.opt = opt = opt || {};
      var self = this;
      self.videoEl = opt.videoEl;
      self.videoEl.loop = opt.loop !== false;
      self.videoEl.muted = opt.muted !== false;
      self.videoEl.playsinline = opt.playsinline !== false;
      
      self.opt.container.appendChild(self.videoEl);
      if (!opt.isMobile) {
        opt.container.style.position = 'relative';
        opt.container.style.overflow = 'hidden';
        self.videoEl.style.position = 'absolute';
        self.videoEl.style.top = '50%';
        self.videoEl.style.left = '50%';
        self.videoEl.style.transform = 'translate(-50%, -50%)';
        self.videoEl.style.webkitTransform = 'translate(-50%, -50%)';
      }
      
      // Handle video source
      if (opt.src) {
        // Handle multiple sources and load the first one
        if (Array.isArray(opt.src) && opt.src.length > 0) {
          var currentIndex = opt.startAt || 0;
          this.loadVideo(opt.src[currentIndex]);
          
          // Add event listener for when the video ends
          if (!opt.loop && typeof opt.onEnd === 'function') {
            this.videoEl.addEventListener('ended', function() {
              opt.onEnd();
            });
          }
        } else if (typeof opt.src === 'string') {
          this.loadVideo({src: opt.src, type: 'video/mp4'});
        }
      }
      
      // Set up resizing
      if (opt.resize !== false) {
        this._resize = function() {
          self.resizeVideo();
        };
        window.addEventListener('resize', this._resize);
      }
      
      // Fade in video by setting the transition and opacity
      if (opt.fadeInDuration) {
        this.videoEl.style.transition = 'opacity ' + (opt.fadeInDuration / 1000) + 's ease-in-out';
        setTimeout(function() {
          self.videoEl.style.opacity = 1;
        }, 100);
      } else {
        this.videoEl.style.opacity = 1;
      }
      
      if (opt.onLoad && typeof opt.onLoad === 'function') {
        this.videoEl.addEventListener('loadeddata', function() {
          if (self.onLoadCalled) return;
          self.onLoadCalled = true;
          opt.onLoad();
        });
      }
    };
    
    this.loadVideo = function(source) {
      var videoSrc = source.src || source;
      var videoType = source.type || 'video/mp4';
      
      this.videoEl.src = videoSrc;
      this.videoEl.type = videoType;
      this.videoEl.load();
      
      if (!this.opt.isMobile) {
        this.videoEl.play();
      }
    };
    
    this.switchVideo = function(index, fadeDuration) {
      if (!Array.isArray(this.opt.src) || index >= this.opt.src.length) {
        return;
      }
      
      var self = this;
      var source = this.opt.src[index];
      
      // Create a temporary video element
      var newVideo = document.createElement('video');
      newVideo.className = 'bideo-next-video';
      newVideo.loop = this.opt.loop !== false;
      newVideo.muted = this.opt.muted !== false;
      newVideo.playsinline = this.opt.playsinline !== false;
      newVideo.style.position = 'absolute';
      newVideo.style.top = '50%';
      newVideo.style.left = '50%';
      newVideo.style.transform = 'translate(-50%, -50%)';
      newVideo.style.webkitTransform = 'translate(-50%, -50%)';
      newVideo.style.opacity = 0;
      newVideo.style.transition = 'opacity ' + (fadeDuration / 1000) + 's ease-in-out';
      
      // Add the new video to the container
      this.opt.container.appendChild(newVideo);
      
      // Load the new video
      newVideo.src = source.src || source;
      newVideo.type = source.type || 'video/mp4';
      newVideo.load();
      
      // Play the new video and fade it in
      var playPromise = newVideo.play();
      if (playPromise !== undefined) {
        playPromise.then(function() {
          // Fade in the new video
          setTimeout(function() {
            newVideo.style.opacity = 1;
            
            // Fade out the old video
            self.videoEl.style.opacity = 0;
            
            // After transition, replace the old video with the new one
            setTimeout(function() {
              self.videoEl.pause();
              self.videoEl.src = '';
              self.opt.container.removeChild(self.videoEl);
              newVideo.className = '';
              self.videoEl = newVideo;
              
              // Reset events on the new video
              if (!self.opt.loop && typeof self.opt.onEnd === 'function') {
                self.videoEl.addEventListener('ended', function() {
                  self.opt.onEnd();
                });
              }
              
              if (self._resize) {
                self.resizeVideo();
              }
            }, fadeDuration);
          }, 100);
        }).catch(function(error) {
          console.error('Error playing video:', error);
          
          // Try with muted if autoplay failed
          newVideo.muted = true;
          newVideo.play().catch(function(err) {
            console.error('Failed even with muted playback:', err);
          });
        });
      }
    };
    
    this.resizeVideo = function() {
      if (!this.videoEl) return;
      
      var container = this.opt.container;
      var containerWidth = container.offsetWidth;
      var containerHeight = container.offsetHeight;
      
      var videoRatio = 16/9;
      
      if (this.videoEl.videoWidth && this.videoEl.videoHeight) {
        videoRatio = this.videoEl.videoWidth / this.videoEl.videoHeight;
      }
      
      var containerRatio = containerWidth / containerHeight;
      var style = this.videoEl.style;
      
      if (containerRatio < videoRatio) {
        style.width = 'auto';
        style.height = containerHeight + 'px';
      } else {
        style.width = containerWidth + 'px';
        style.height = 'auto';
      }
    };
  }
  
  // Expose Bideo constructor globally
  global.Bideo = Bideo;
})(window);